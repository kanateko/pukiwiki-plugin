export const pluginSwitch=()=>{const ranges=document.querySelectorAll(".switch-range"),selects=document.querySelectorAll(".switch-select"),numbers=document.querySelectorAll(".switch-number");for(const range of ranges)switchByRange(range);for(const select of selects)switchBySelect(select);for(const number of numbers)switchByNumber(number)};const switchByRange=range=>{const min=range.dataset.min,step=range.dataset.step,group=range.dataset.group,groupedElements=getGroupedElements(group,range.id),output=range.nextElementSibling;range.addEventListener("input",(e=>{const ct=e.currentTarget,index=(ct.value-min)/step;output.innerHTML=Number(ct.value).toLocaleString();for(const el of groupedElements)switchSelectedElement(el,index)}))},switchBySelect=select=>{const group=select.dataset.group,groupedElements=getGroupedElements(group,select.id);select.addEventListener("input",(e=>{const index=e.currentTarget.selectedIndex;for(const el of groupedElements)switchSelectedElement(el,index)}))},switchByNumber=number=>{const min=number.dataset.min,step=number.dataset.step,group=number.dataset.group,groupedElements=getGroupedElements(group,number.id);number.addEventListener("input",(e=>{const ct=e.currentTarget,diff=isFinite(min)?min:0,index=(ct.value-diff)/step;for(const el of groupedElements)switchSelectedElement(el,index)}))},getGroupedElements=(group,id)=>document.querySelectorAll('[data-group="'+group+'"]:not(#'+id+")"),switchSelectedElement=(el,index)=>{if(el.classList.contains("switch-range"))el.value=Number(el.dataset.step)*index+Number(el.dataset.min),el.nextElementSibling.innerHTML=Number(el.value).toLocaleString();else if(el.classList.contains("switch-linear"))el.innerHTML=calcurateCurrentValue(el,index).toLocaleString();else if(el.classList.contains("switch-number"))el.value=calcurateCurrentValue(el,index);else{const items=el.querySelectorAll(".switch-item"),lastIndex=items.length-1;index>lastIndex&&(index=lastIndex);for(let i=0;i<items.length;i++){const item=items[i];el.classList.contains("switch-select")?item.selected=index==i:el.classList.contains("switch-default")&&(index==i?item.dataset.selected="":delete item.dataset.selected)}}},calcurateCurrentValue=(el,index)=>{const numMin="-INF"===el.dataset.min?-1/0:Number(el.dataset.min),numMax="INF"===el.dataset.max?1/0:Number(el.dataset.max),numStep=Number(el.dataset.step),isPositive=numStep>0;let currentValue=numStep*index;return(isFinite(numMin)&&isPositive||isFinite(numMax)&&!isPositive)&&(currentValue=isPositive?numMin+currentValue:numMax+currentValue),currentValue=currentValue<numMin?numMin:currentValue>numMax?numMax:currentValue,currentValue};