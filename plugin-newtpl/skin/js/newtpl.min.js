export const addAutoComplete=(id,src)=>{const autocomp=new autoComplete({selector:"#autoComplete"+id,data:{src:src,cache:!0},resultsList:{maxResults:25},resultItem:{highlight:!0},events:{input:{selection:event=>{const selection=event.detail.selection.value;autocomp.input.value=selection}}}})};export const newtplForm=()=>{const form=document.querySelector(".plugin-newtpl");preventEnterKey(form),showRangeValue(form),toggleRequired(form)};const preventEnterKey=form=>{form.addEventListener("keypress",(e=>{if("Enter"===e.key){"INPUT"===document.activeElement.nodeName&&e.preventDefault()}}))},showRangeValue=form=>{const sliders=form.querySelectorAll('input[type="range"]'),show=elem=>elem.nextElementSibling.innerText=elem.value;for(const slider of sliders)show(slider),slider.addEventListener("input",(()=>{show(slider)}))},toggleRequired=form=>{const checkboxes=form.querySelectorAll("input[type=checkbox]"),toggle=checkbox=>{const group=checkbox.closest(".newtpl-post"),siblings=group.querySelectorAll("input[type=checkbox]"),unchecked=null===group.querySelector("input[type=checkbox]:checked");for(const sibling of siblings)sibling.required=unchecked};for(const checkbox of checkboxes){"true"===checkbox.closest(".newtpl-item").dataset.require&&(toggle(checkbox),checkbox.addEventListener("change",(()=>{toggle(checkbox)})))}};